<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--配置bean-->
    <!--
    bean作用：
    用于配置对象让 spring 来创建的。
    默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。
    属性：
    id： 给对象在容器中提供一个唯一标识。用于获取对象。
    class： 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。
    scope： 指定对象的作用范围。
            * singleton :默认值，单例的.
            一个应用只有一个对象的实例。它的作用范围就是整个引用。
            生命周期：
            对象出生：当应用加载，创建容器时，对象就被创建了。
            对象活着：只要容器在，对象一直活着。
            对象死亡：当应用卸载，销毁容器时，对象就被销毁了。
            * prototype :多例的.
            每次访问对象时，都会重新创建对象实例。
            生命周期：
            对象出生：当使用对象时，创建新的对象实例。
            对象活着：只要对象在使用中，就一直活着。
            对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了。

            * request :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 request 域中.
            * session :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 session 域中.
            * global session :WEB 项目中,应用在 Portlet 环境.如果没有 Portlet 环境那么
    globalSession 相当于 session.
    init-method： 指定类中的初始化方法名称。
    destroy-method： 指定类中销毁方法名称。
    -->
    <!--默认使用无参构造实例化Bean-->
    <!---->
    <bean id="accountService" class="fun.chenqi.service.impl.AccountServiceImpl"/>
    <!--配置Dao-->
    <bean id="accountDao" class="fun.chenqi.dao.impl.AccountDaoImpl"/>

    <!--此种方式是:
     使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器
     id 属性：指定 bean 的 id，用于从容器中获取
     class 属性：指定静态工厂的全限定类名
     factory-method 属性：指定生产对象的静态方法
     -->
    <bean id="accountServiceStatic"
          class="fun.chenqi.factory.StaticFactory"
          factory-method="createAccountService"
    />

    <!--此种方式是：
        先把工厂的创建交给 spring 来管理。
        然后在使用工厂的 bean 来调用里面的方法
        factory-bean 属性：用于指定实例工厂 bean 的 id。
        factory-method 属性：用于指定实例工厂中创建对象的方法。
    -->
    <bean id="accountService1" factory-method="createAccountService" factory-bean="instanceFactory"/>
    <bean id="instanceFactory" class="fun.chenqi.factory.InstanceFactory"/>


    <!--set方法注入-->
    <bean id="accountService2" class="fun.chenqi.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>

    <!--构造方法注入
        使用构造函数的方式，给 service 中的属性传值
        要求：
        类中需要提供一个对应参数列表的构造函数。
        涉及的标签：
        constructor-arg
        属性：
        index:指定参数在构造函数参数列表的索引位置
        type:指定参数在构造函数中的数据类型
        name:指定参数在构造函数中的名称 用这个找给谁赋值
        =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============
        value:它能赋的值是基本数据类型和 String 类型
        ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean-->
    <bean id="zhuru01" class="fun.chenqi.service.impl.ZhuRuImpl">
        <constructor-arg index="0" value="陈琦"/>
        <constructor-arg index="1" value="23"/>
        <constructor-arg index="2" ref="date"/>
    </bean>
    <bean id="date" class="java.util.Date"/>

    <!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式
           涉及的标签： property
           属性：
           name：找的是类中 set 方法后面的部分
           ref：给属性赋值是其他 bean 类型的
           value：给属性赋值是基本数据类型和 string 类型的
           实际开发中，此种方式用的较多。
-->
    <bean id="zhuru02" class="fun.chenqi.service.impl.ZhuRuImpl02">
        <property name="name" value="ss"/>
        <property name="age" value="11"/>
        <property name="bir" ref="date"/>
    </bean>


    <!-- 注入集合数据
            List 结构的：
            array,list,set
            Map 结构的
            map,entry,props,prop
-->
    <bean id="zhuru03" class="fun.chenqi.service.impl.ZhuRuImpl03">
        <!-- 在注入集合数据时，只要结构相同，标签可以互换 -->
        <property name="myList">
            <list>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </list>
        </property>

        <property name="myMap">
            <map>
                <entry key="1" value="11"/>
                <entry key="2" value="22"/>
                <entry key="3" value="33"/>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="1">11</prop>
                <prop key="2">22</prop>
                <prop key="3">33</prop>
            </props>
        </property>
        <property name="mySet">
            <set>
                <value>111</value>
                <value>333</value>
                <value>222</value>
            </set>
        </property>
        <property name="myStrs">
            <array>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </array>
        </property>
    </bean>


</beans>